type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat32;
   key: nat32;
   sha256: opt vec nat8;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type Response = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
service : {
  autoScaleProfileCollectionServiceCanister: (text) -> (text);
  createProfileCollectionServiceCanisterByGroup: (text) -> (opt text);
  getCanistersByPK: (text) -> (vec text) query;
  getCycles: () -> (nat) query;
  getHeapSize: () -> (nat) query;
  getMemorySize: () -> (nat) query;
  http_request: (Request) -> (Response) query;
}
